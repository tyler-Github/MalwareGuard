import os
import subprocess
import questionary
from rich.console import Console
from rich.table import Table
from tqdm import tqdm
import traceback
import time
import random
import shutil

os.system('cls')

# Define the ASCII art
logo = """
███ █┼┼█ ███ ███ ┼┼ █▄█ ███ ███ █┼█ ███
█▄█ ██▄█ ┼█┼ ┼█┼ ┼┼ ███ ┼█┼ █▄┼ █┼█ █▄▄
█┼█ █┼██ ┼█┼ ▄█▄ ┼┼ ┼█┼ ▄█▄ █┼█ ███ ▄▄█                                                                                                   
"""

# Define the color codes for the text
GREEN = '\033[32m'
YELLOW = '\033[33m'
RED = '\033[31m'
BLUE = '\033[34m'
PURPLE = '\033[35m'
CYAN = '\033[36m'
RESET = '\033[0m'

# Define the text animation
animation = ["Initializing", "Scanning", "Detecting threats", "Quarantining threats", "Cleaning up", "Completed"]

# Define a list of random tips to display during the animation
tips = [
    "Use strong, unique passwords for each of your accounts.",
    "Keep your software and operating system up-to-date with the latest patches and updates.",
    "Avoid clicking on suspicious links or downloading unknown files.",
    "Use an ad-blocker to reduce the risk of malware infections.",
    "Be cautious when opening email attachments, even from known senders.",
    "Regularly backup your important files and data.",
    "Use two-factor authentication to add an extra layer of security to your accounts."
]

# Get the width of the console window
console_width = shutil.get_terminal_size().columns

# Get the width of the logo
logo_width = max(len(line) for line in logo.split('\n'))

# Calculate the number of spaces to center the logo
center_spaces = (console_width - logo_width) // 2

# Loop through the animation and print each frame with different colors
for index, frame in enumerate(animation):
    # Clear the console and print the logo in red
    os.system('cls')
    print(RED + ' '*center_spaces + logo + RESET)
    
    # Print the progress bar and text in different colors
    progress_bar = '.'*(index+1)
    print('\n\n\n\n\n\n\n\n\n\t\t\t\t' + BLUE + frame + '...' + YELLOW + ' ' + progress_bar + RESET)
    
    # Print a random security tip in purple
    print('\n\n\t\t\t\t' + PURPLE + 'Tip: ' + random.choice(tips) + RESET)
    
    # Delay between frames
    time.sleep(0.5)

# Print a final message in green
os.system('cls')
print(GREEN + ' '*center_spaces + logo + RESET)
print('\n\n\n\n\n\n\n\n\n\t\t\t\t' + CYAN + 'Anti-Virus is ready to protect your system.' + RESET)

def scan_file(file_path, clamscan_path):
    # Scan a single file using ClamAV
    result = subprocess.run([clamscan_path, '-v', file_path], capture_output=True, text=True)
    return result.stdout.strip()


def scan_directory(directory_path, clamscan_path):
    # Scan all files in a directory using ClamAV
    result = subprocess.run([clamscan_path, '-v', '-r', directory_path], capture_output=True, text=True)
    return result.stdout.strip()


def display_results(results):
    # Display the scan results in a table using Rich
    table = Table(show_header=True, header_style="bold")
    table.add_column("File")
    table.add_column("Status")
    for file, status in results.items():
        table.add_row(file, status)
    console = Console()
    console.print(table)


def main():
    # Prompt the user to select what they want to scan
    options = [
        {'name': 'Scan a file', 'value': 'file'},
        {'name': 'Scan a directory', 'value': 'directory'}
    ]
    selection = questionary.select('What do you want to scan?', choices=options).ask()
    clamscan_path = os.path.join(os.path.dirname(os.path.abspath(__file__)), 'Handler', 'clamscan.exe')

    if selection == 'file':
        # Prompt the user to specify the file path
        file_path = questionary.path('Enter the path to the file you want to scan:').ask()
        if not os.path.exists(file_path):
            print(f'Error: {file_path} is not a valid file path.')
            return
        if os.path.isdir(file_path):
            print(f'Error: {file_path} is a directory. Please select a file to scan.')
            return
        result = scan_directory(file_path, clamscan_path)
        print(result)

    elif selection == 'directory':
        # Prompt the user to specify the directory path
        directory_path = questionary.path('Enter the path to the directory you want to scan:').ask()
        if not os.path.exists(directory_path):
            print(f'Error: {directory_path} is not a valid directory path.')
            return
        if os.path.isfile(directory_path):
            print(f'Error: {directory_path} is a file. Please select a directory to scan.')
            return
        print('Scanning files...')
        file_count = sum(len(files) for _, _, files in os.walk(directory_path))
        with tqdm(total=file_count, unit='file') as progress:
            results = {}
            for root, _, files in os.walk(directory_path):
                for file in files:
                    file_path = os.path.join(root, file)
                    result = scan_directory(file_path, clamscan_path)
                    if 'OK' not in result:
                        results[file_path] = 'clean'
                    else:
                        results[file_path] = 'infected'
                    progress.update()
        display_results(results)


if __name__ == '__main__':
    try:
        main()
    except Exception as e:
        print(f"Error: {e}")
        traceback.print_exc()
